version: "3.8"
services:
  db:
    restart: always
    image: postgres:latest
    container_name: postgres_container
    environment:
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    networks:
      - backend
    volumes:
      - mlflow_postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready"]
      interval: 10s
      timeout: 5s
      retries: 5
  mlflow:
    restart: always
    build:
      context: mlflow/
      args:
        MLFLOW_VERSION: ${MLFLOW_VERSION}
    image: mlflow_server
    container_name: mlflow_server
    environment:
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}
      - S3_BUCKET=${S3_BUCKET}
      - DB_BACKEND=postgresql://${DB_USERNAME}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}
    ports:
      - "5001:5000"
    networks:
      - frontend
      - backend
    depends_on:
      postgresql:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 10s

  nginx:
    restart: always
    build: ./nginx
    image: mlflow_nginx
    container_name: mlflow_nginx
    ports:
      - 8080:80
    networks:
      - frontend
    depends_on:
      - mlflow
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 10s
      timeout: 5s
      retries: 5
volumes:
  mlflow_postgres:

networks:
  frontend:
    driver: bridge
  backend:
    driver: bridge
